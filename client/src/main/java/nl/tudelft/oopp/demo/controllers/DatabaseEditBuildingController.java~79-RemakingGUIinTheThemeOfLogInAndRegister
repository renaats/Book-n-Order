package nl.tudelft.oopp.demo.controllers;

import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.ResourceBundle;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Alert;
import javafx.scene.control.ChoiceBox;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextField;
<<<<<<< HEAD:client/src/main/java/nl/tudelft/oopp/demo/controllers/DatabaseBuildingController.java
import javafx.scene.control.cell.PropertyValueFactory;
import nl.tudelft.oopp.demo.communication.JsonMapper;
=======
import javafx.scene.input.MouseEvent;
>>>>>>> 79-RemakingGUIinTheThemeOfLogInAndRegister:client/src/main/java/nl/tudelft/oopp/demo/controllers/DatabaseEditBuildingController.java
import nl.tudelft.oopp.demo.communication.ServerCommunication;
import nl.tudelft.oopp.demo.entities.Building;
import nl.tudelft.oopp.demo.views.ApplicationDisplay;

/**
 * Adds the functionality to DatabaseEditBuildings.fxml file
 */
public class DatabaseEditBuildingController implements Initializable {

<<<<<<< HEAD:client/src/main/java/nl/tudelft/oopp/demo/controllers/DatabaseBuildingController.java
    final ObservableList<String> updateChoiceBoxList = FXCollections.observableArrayList();
    final ObservableList<Building> buildingResult = FXCollections.observableArrayList();
=======
    final ObservableList updateChoiceBoxList = FXCollections.observableArrayList();
>>>>>>> 79-RemakingGUIinTheThemeOfLogInAndRegister:client/src/main/java/nl/tudelft/oopp/demo/controllers/DatabaseEditBuildingController.java

    @FXML
    private ChoiceBox<String> updateChoiceBox;
    @FXML
    private TextField buildingFindByIdTextField;

    @FXML
    private TextField buildingFindByIdUpdateField;
    @FXML
    private TextField buildingChangeToField;
    @FXML
    private TableView<Building> table;
    @FXML
    private TableColumn<Building, String> colId;
    @FXML
    private TableColumn<Building, String> colName;
    @FXML
    private TableColumn<Building, String> colStreet;
    @FXML
    private TableColumn<Building, Integer> colHouseNumber;


    @Override
    public void initialize(URL location, ResourceBundle resources) {
        loadDataUpdateChoiceBox();

        colId.setCellValueFactory(new PropertyValueFactory<>("id"));
        colName.setCellValueFactory(new PropertyValueFactory<>("name"));
        colStreet.setCellValueFactory(new PropertyValueFactory<>("street"));
        colHouseNumber.setCellValueFactory(new PropertyValueFactory<>("houseNumber"));

    }

    /**
     * Handles clicking the building find button.
     */
    public void buildingIdButtonClicked() {
        try {
            int id = Integer.parseInt(buildingFindByIdTextField.getText());
            Building building = JsonMapper.buildingMapper(ServerCommunication.findBuilding(id));
            buildingResult.clear();
            buildingResult.add(building);
            table.setItems(buildingResult);
        } catch (Exception e) {
            Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setTitle("Error");
            alert.setHeaderText(null);
            alert.setContentText("Missing argument.");
            alert.showAndWait();
        }
    }

    /**
     * Handles clicking the list button.
     */
    public void listBuildingsButtonClicked() {
        try {
            List<Building> buildings = new ArrayList<>(Objects.requireNonNull(JsonMapper.buildingListMapper(ServerCommunication.getBuildings())));
            buildingResult.clear();
            buildingResult.addAll(buildings);
            table.setItems(buildingResult);
        } catch (Exception e) {
            Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setTitle("Error");
            alert.setHeaderText(null);
            alert.setContentText("No buildings found.");
            alert.showAndWait();
        }
    }

    /**
<<<<<<< HEAD:client/src/main/java/nl/tudelft/oopp/demo/controllers/DatabaseBuildingController.java
     * Changes current scene to mainScene.fxml.
     * @throws IOException again, all input will be valid. No need to check this, thus we throw.
     */
    public void databaseBuildingMenu() throws IOException {
        ApplicationDisplay.changeScene("/DatabaseEditBuildings.fxml");
    }

    /**
     * Changes current scene to mainScene.fxml.
     * @throws IOException again, all input will be valid. No need to check this, thus we throw.
     */
    public void databaseRoomMenu() throws IOException {
        ApplicationDisplay.changeScene("/DatabaseEditRoom.fxml");
    }

    /**
     * Handles clicking of the Remove Building button.
     */
    public void deleteBuildingButtonClicked() {
        try {
            int id = Integer.parseInt(buildingDeleteByIdTextField.getText());
            ServerCommunication.deleteBuilding(id);
            buildingResult.removeIf(b -> b.getId() == id);
        } catch (Exception e) {
            Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setTitle("Error");
            alert.setHeaderText(null);
            alert.setContentText("Missing argument.");
            alert.showAndWait();
        }
    }

    /**
     * Handles the sending of updated values.
=======
     * Handles the sending of update values.
>>>>>>> 79-RemakingGUIinTheThemeOfLogInAndRegister:client/src/main/java/nl/tudelft/oopp/demo/controllers/DatabaseEditBuildingController.java
     */
    public void updateBuildingButtonClicked() {
        try {
            int id = Integer.parseInt(buildingFindByIdUpdateField.getText());
            String attribute = updateChoiceBox.getValue().replaceAll(" ", "");
            String changeValue = buildingChangeToField.getText();
            Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setTitle("Building update");
            alert.setHeaderText(null);
            alert.setContentText(ServerCommunication.updateBuilding(id, attribute, changeValue));
            alert.showAndWait();
            buildingResult.clear();
            listBuildingsButtonClicked();
        } catch (Exception e) {
            Alert alert = new Alert(Alert.AlertType.INFORMATION);
            alert.setTitle("Error");
            alert.setHeaderText(null);
            alert.setContentText("Missing argument.");
            alert.showAndWait();
        }
    }

    /**
     * Takes care of the options for the updateChoiceBox in the GUI
     */
    public void loadDataUpdateChoiceBox() {
        updateChoiceBoxList.removeAll();
        String a = "Name";
        String b = "Street";
        String c = "House Number";
        updateChoiceBoxList.addAll(a, b, c);
        updateChoiceBox.getItems().addAll(updateChoiceBoxList);
    }
    /**
     * return to the database main menu when the home icon is clicked
     * @param mouseEvent the click on the home icon on the databased screens
     * @throws IOException this should not throw an exception, since the input is always the same
     */

    public void mainMenu(MouseEvent mouseEvent) throws IOException {
        ApplicationDisplay.changeScene("/DatabaseMainMenu.fxml");
    }
    /**
     * sends the user to the add building view
     * @param actionEvent the click on Go to add building button
     * @throws IOException this should not throw an exception, since the input is always the same
     */

    public void goToAddBuildings(ActionEvent actionEvent) throws IOException {
        ApplicationDisplay.changeScene("/DatabaseAddBuildings.fxml");
    }
    /**
     * sends the user to the remove building view
     * @param actionEvent the click on Go to add building button
     * @throws IOException this should not throw an exception, since the input is always the same
     */

    public void goToRemoveBuildings(ActionEvent actionEvent) throws IOException {
        ApplicationDisplay.changeScene("/DatabaseRemoveBuildings.fxml");
    }
    /**
     * sends the user to the edit building view
     * @param actionEvent the click on Go to add building button
     * @throws IOException this should not throw an exception, since the input is always the same
     */

    public void goToEditBuildings(ActionEvent actionEvent) throws IOException {
        ApplicationDisplay.changeScene("/DatabaseEditBuildings.fxml");
    }
    /**
     * return to the database building menu when the building icon on the menu bar is clicked
     * @param mouseEvent the click on the home icon on the databased screens
     * @throws IOException this should not throw an exception, since the input is always the same
     */

<<<<<<< HEAD:client/src/main/java/nl/tudelft/oopp/demo/controllers/DatabaseBuildingController.java
    public void mainMenu(ActionEvent actionEvent) throws IOException {
        ApplicationDisplay.changeScene("/mainMenuReservations.fxml");
=======
    public void goToBuildingMenu(MouseEvent mouseEvent) throws IOException {
        ApplicationDisplay.changeScene("/DatabaseBuildingMenu.fxml");
>>>>>>> 79-RemakingGUIinTheThemeOfLogInAndRegister:client/src/main/java/nl/tudelft/oopp/demo/controllers/DatabaseEditBuildingController.java
    }
}
