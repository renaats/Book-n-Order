package nl.tudelft.oopp.demo.controllers;

import nl.tudelft.oopp.demo.entities.Building;
import nl.tudelft.oopp.demo.repositories.BuildingRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

@Repository
@RestController // This means that this class is a Controller
@RequestMapping(path = "/demo") // This means URL's start with /demo (after Application path)
public class BuildingController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private BuildingRepository buildingRepository;

    /**
     * Adds a building.
     * @param name = the name of the building
     * @return String to see if your request passed
     */
    @PostMapping(path = "/add") // Map ONLY POST Requests
    @ResponseBody
    public String addNewBuilding(@RequestParam String name, @RequestParam String email) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        Building n = new Building();
        n.setName(name);
        n.setEmail(email);
        buildingRepository.save(n);
        return "Saved";
    }

    /**
     * Deletes a building.
     * @param id = the id of the building
     * @return String to see if your request passed
     */
    @PostMapping(path = "/delete")
    @ResponseBody
    public String deleteBuilding(@RequestParam int id) {
        if (!buildingRepository.existsById(id)) {
            return "Building with ID: " + id + " Does not exist!";
        }
        buildingRepository.deleteById(id);
        return "Deleted!";
    }

    /**
     * Updates a database attribute
     * @param id
     * @param email
     * @return message if it passes
     */
     @PostMapping(path = "/update")
     @ResponseBody
     public String updateBuilding(@RequestParam int id, @RequestParam String email) {
        Building building = buildingRepository.getOne(id);
        String old = building.getEmail();
        building.setEmail(email);
        buildingRepository.save(building);
        return old + " changed to " + email + " for building ID: " + id;
     }

    /**
     * Lists all buildings.
     * @return all buildings
     */
    @GetMapping(path = "/all")
    @ResponseBody
    public Iterable<Building> getAllUsers() {
        // This returns a JSON or XML with the users
        return buildingRepository.findAll();
    }
}
