package nl.tudelft.oopp.demo.controllers;

import java.util.Date;
import java.util.Optional;

import nl.tudelft.oopp.demo.entities.Room;
import nl.tudelft.oopp.demo.entities.RoomReservation;
import nl.tudelft.oopp.demo.entities.User;
import nl.tudelft.oopp.demo.repositories.RoomRepository;
import nl.tudelft.oopp.demo.repositories.RoomReservationRepository;
import nl.tudelft.oopp.demo.repositories.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;


@Repository
@RestController // This means that this class is a Controller
@RequestMapping(path = "/room_reservation") // This means URL's start with /room_reservation (after Application path)
public class RoomReservationController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private RoomReservationRepository roomReservationRepository;

    @Autowired
    private RoomRepository roomRepository;

    @Autowired
    private UserRepository userRepository;

    /**
     * Adds a room reservation.
     * @param roomId = the id of the room associated to the reservation.
     * @param userEmail = the email of the user associated to the reservation.
     * @param fromTimeMs = the starting time of the reservation.
     * @param toTimeMs = the ending time of the reservation.
     * @return String containing the result of your request.
     */
    @PostMapping(path = "/add") // Map ONLY POST Requests
    @ResponseBody
    public String addNewRoomReservation(
            @RequestParam long fromTimeMs,
            @RequestParam long toTimeMs,
            @RequestParam int roomId,
            @RequestParam String userEmail
    ) {
        Optional<Room> optionalRoom = roomRepository.findById(roomId);
        if (optionalRoom.isEmpty()) {
            return "Could not find room with id " + roomId + "!";
        }
        Room room = optionalRoom.get();

        Optional<User> optionalUser = userRepository.findById(userEmail);
        if (optionalUser.isEmpty()) {
            return "Could not find user with email " + userEmail + "!";
        }
        User user = optionalUser.get();

        if (room.hasRoomReservationBetween(new Date(fromTimeMs), new Date(toTimeMs))) {
            return "This room is already reserved at this time!";
        }


        RoomReservation roomReservation = new RoomReservation();
        roomReservation.setRoom(room);
        roomReservation.setUser(user);
        roomReservation.setFromTime(new Date(fromTimeMs));
        roomReservation.setToTime(new Date(toTimeMs));
        roomReservationRepository.save(roomReservation);
        return "Saved!";
    }

    /**
     * Updates a specified attribute for some room reservation.
     * @param id = the id of the room reservation.
     * @param attribute = the attribute whose value is changed.
     * @param value = the new value of the attribute.
     * @return String containing the result of your request.
     */
    @PostMapping(path = "/update")
    @ResponseBody
    public String updateAttribute(@RequestParam int id, @RequestParam String attribute, @RequestParam String value) {
        if (roomReservationRepository.findById(id).isEmpty()) {
            return "Room with ID: " + id + " does not exist!";
        }
        RoomReservation roomReservation = roomReservationRepository.findById(id).get();

        switch (attribute) {
            case "fromDate":
                roomReservation.setFromTime(new Date(Integer.parseInt(value)));
                break;
            case "toDate":
                roomReservation.setToTime(new Date(Integer.parseInt(value)));
                break;
            case "roomId":
                int roomId = Integer.parseInt(value);
                Optional<Room> optionalRoom = roomRepository.findById(roomId);
                if (optionalRoom.isEmpty()) {
                    return "Could not find room with id " + roomId + "!";
                }
                Room room = optionalRoom.get();
                roomReservation.setRoom(room);
                break;
            case "userEmail":
                Optional<User> optionalUser = userRepository.findById(value);
                if (optionalUser.isEmpty()) {
                    return "Could not find user with email " + value + "!";
                }
                User user = optionalUser.get();
                roomReservation.setUser(user);
                break;
            default:
                return "No attribute with name " + attribute + " found!";
        }
        roomReservationRepository.save(roomReservation);
        return "The attribute has been set!";
    }


    /**
     * Deletes a room reservation.
     * @param id = the id of the room reservation.
     * @return String containing the result of your request.
     */
    @DeleteMapping(path = "/delete")
    @ResponseBody
    public String deleteRoomReservation(@RequestParam int id) {
        if (!roomReservationRepository.existsById(id)) {
            return "Room reservation with ID: " + id + " does not exist!";
        }
        roomReservationRepository.deleteById(id);
        return "Deleted!";
    }

    /**
     * Lists all room reservations.
     * @return Iterable of all room reservations.
     */
    @GetMapping(path = "/all")
    @ResponseBody
    public Iterable<RoomReservation> getAllRoomReservations() {
        return roomReservationRepository.findAll();
    }

}