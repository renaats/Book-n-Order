package nl.tudelft.oopp.demo.controllers;

import java.util.Optional;
import nl.tudelft.oopp.demo.entities.Building;
import nl.tudelft.oopp.demo.entities.Room;
import nl.tudelft.oopp.demo.repositories.BuildingRepository;
import nl.tudelft.oopp.demo.repositories.RoomRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;


@Repository
@RestController // This means that this class is a Controller
@RequestMapping(path = "/room") // This means URL's start with /demo (after Application path)
public class RoomController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private RoomRepository roomRepository;
    @Autowired
    private BuildingRepository buildingRepository;

    /**
     * Adds a room.
     * @param name = the name of the room
     * @param faculty = the name of the faculty
     * @param buildingId = the id of the building of the room
     * @param facultySpecific = boolean representing room restrictions
     * @param screen = boolean representing the availability of a screen
     * @param projector = boolean representing the availability of a projector
     * @param nrPeople = the number of people this room fits
     * @param plugs = the number of plugs in this room
     * @return String to see if your request passed
     */
    @PostMapping(path = "/add") // Map ONLY POST Requests
    @ResponseBody
    public String addNewRoom(
            @RequestParam String name,
            @RequestParam String faculty,
            @RequestParam boolean facultySpecific,
            @RequestParam boolean screen,
            @RequestParam boolean projector,
            @RequestParam int buildingId,
            @RequestParam int nrPeople,
            @RequestParam int plugs
    ) {
        Optional<Building> optionalBuilding = buildingRepository.findById(buildingId);
        if (optionalBuilding.isEmpty()) {
            return "Could not find building with id " + buildingId + "!";
        }
        Building building = optionalBuilding.get();

        Room room = new Room();
        room.setBuilding(building);
        room.setName(name);
        room.setFaculty(faculty);
        room.setFacultySpecific(facultySpecific);
        room.setScreen(screen);
        room.setProjector(projector);
        room.setNrPeople(nrPeople);
        room.setPlugs(plugs);
        roomRepository.save(room);
        return "Saved!";
    }

    /**
     * Updates a specified attribute for some room.
     * @param id = the id of the room
     * @param attribute = the attribute that is changed
     * @param value = the new value of the attribute
     * @return String to see if your request passed
     */
    @PostMapping(path = "/update")
    @ResponseBody
    public String updateAttribute(@RequestParam int id, @RequestParam String attribute, @RequestParam String value) {
        if (!roomRepository.existsById(id)) {
            return "Room with ID: " + id + " does not exist!";
        }
        Room room = roomRepository.findById(id).get();

        switch (attribute) {
            case "name":
                room.setName(value);
                break;
            case "faculty":
                room.setFaculty(value);
                break;
            case "facultySpecific":
                room.setFacultySpecific(Boolean.parseBoolean(value));
                break;
            case "screen":
                room.setScreen(Boolean.parseBoolean(value));
                break;
            case "projector":
                room.setProjector(Boolean.parseBoolean(value));
                break;
            case "buildingId":
                int buildingId = Integer.parseInt(value);
                Optional<Building> optionalBuilding = buildingRepository.findById(buildingId);
                if (optionalBuilding.isEmpty()) {
                    return "Could not find building with id " + buildingId + "!";
                }
                Building building = optionalBuilding.get();
                building.addRoom(room);
                break;
            case "nrPeople":
                room.setNrPeople(Integer.parseInt(value));
                break;
            case "plugs":
                room.setPlugs(Integer.parseInt(value));
                break;
            default:
                return "No attribute with name " + attribute + " found!";
        }
        roomRepository.save(room);
        return "The attribute has been set!";
    }


    /**
     * Deletes a room.
     * @param id = the id of the room
     * @return String to see if your request passed
     */
    @PostMapping(path = "/delete")
    @ResponseBody
    public String deleteRoom(@RequestParam int id) {
        if (!roomRepository.existsById(id)) {
            return "Room with ID: " + id + " does not exist!";
        }
        roomRepository.deleteById(id);
        return "Deleted!";
    }

    /**
     * Lists all rooms.
     * @return all rooms
     */
    @GetMapping(path = "/all")
    @ResponseBody
    public Iterable<Room> getAllRooms() {
        return roomRepository.findAll();
    }

    /**
     * Finds a room with the specified id.
     * @param roomId = the room id
     * @return a room that matches the id
     */
    @GetMapping(path = "/find/{roomId}")
    @ResponseBody
    public Room findRoom(@PathVariable (value = "roomId") int roomId) {
        return roomRepository.findById(roomId).orElse(null);
    }

}