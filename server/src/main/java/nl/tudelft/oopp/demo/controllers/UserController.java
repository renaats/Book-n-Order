package nl.tudelft.oopp.demo.controllers;

import nl.tudelft.oopp.demo.entities.User;
import nl.tudelft.oopp.demo.repositories.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

@Repository
@RestController // This means that this class is a Controller
@RequestMapping(path = "/user") // This means URL's start with /user (after Application path)
public class UserController {
    @Autowired // This means to get the bean called UserRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    /**
     * Adds a user to the database.
     * @param name = the name of the new user.
     * @return String containing the result of your request.
     */
    @PostMapping(path = "/add") // Map ONLY POST Requests
    @ResponseBody
    public String addUser(
            @RequestParam String email,
            @RequestParam String password,
            @RequestParam String name,
            @RequestParam String surname,
            @RequestParam String faculty
    ) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request.
        if (userRepository.existsById(email)) {
            return "The account with email " + email + " already exists!";
        }
        User user = new User();

        user.setEmail(email);
        user.setPassword(password);
        user.setName(name);
        user.setSurname(surname);
        user.setFaculty(faculty);
        userRepository.save(user);
        return "Account created!";
    }

    /**
     * Deletes an account from the database.
     * @param email = the email of the account to be deleted.
     * @return String containing the result of your request.
     */
    @DeleteMapping(path = "/delete")
    @ResponseBody
    public String deleteUser(@RequestParam String email) {
        if (!userRepository.existsById(email)) {
            return "The account with email " + email + " does not exist!";
        }
        userRepository.deleteById(email);
        return "The account with email " + email + " has been deleted!";
    }

    /**
     * Updates a specified attribute for given user.
     * @param email = the email address of the user.
     * @param attribute = the attribute whose value is to be changed.
     * @param value = the new value of the attribute.
     * @return String containing the result of your request.
     */
    @PostMapping(path = "/update")
    @ResponseBody
    public String updateAttribute(@RequestParam String email, @RequestParam String attribute, @RequestParam String value) {
        if (userRepository.findById(email).isEmpty()) {
            return "User with email " + email + " does not exist!";
        }
        User user = userRepository.findById(email).get();

        switch (attribute) {
            case "email":
                user.setEmail(value);
                break;
            case "password":
                user.setPassword(value);
                break;
            case "name":
                user.setName(value);
                break;
            case "surname":
                user.setSurname(value);
                break;
            case "faculty":
                user.setFaculty(value);
                break;
            default:
                return "No attribute with name " + attribute + " found!";
        }
        userRepository.save(user);
        return "The attribute has been set!";
    }

    /**
     * Lists all accounts in the database.
     * Should be removed for the finished version!
     * @return Iterable of all accounts.
     */
    @GetMapping(path = "/all")
    @ResponseBody
    public Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }

    /**
     * Retrieves an account given its email.
     * @return User with the specified email, or null if no such account exists.
     */
    @GetMapping(path = "/find")
    @ResponseBody
    public User getUser(@RequestParam String email) {
        if (!userRepository.existsById(email)) {
            return null;
            //return "The account with email " + email + " does not exist!";
        }
        User user = userRepository.getOne(email);
        return user;
    }

}
