package nl.tudelft.oopp.demo.controllers;

import java.util.Optional;

import nl.tudelft.oopp.demo.entities.Bike;
import nl.tudelft.oopp.demo.entities.Building;
import nl.tudelft.oopp.demo.repositories.BikeRepository;
import nl.tudelft.oopp.demo.repositories.BuildingRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;


@Repository
@RestController // This means that this class is a Controller
@RequestMapping(path = "/bike") // This means URL's start with /bike (after Application path)
public class BikeController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private BikeRepository bikeRepository;
    @Autowired
    private BuildingRepository buildingRepository;

    /**
     * Adds a bike.
     * @param buildingId = the building, where the bike is located
     * @param available = the availability of the bike
     * @return String to see if your request passed
     */
    @PostMapping(path = "/add") // Map ONLY POST Requests
    @ResponseBody
    public String addNewBike(
            @RequestParam int buildingId,
            @RequestParam boolean available
    ) {
        Optional<Building> optionalBuilding = buildingRepository.findById(buildingId);
        if (optionalBuilding.isEmpty()) {
            return "Could not find building with id " + buildingId + "!";
        }


        Bike bike = new Bike();
        bike.setLocation(optionalBuilding.get());
        bike.setAvailable(available);
        bikeRepository.save(bike);
        return "Saved!";
    }

    /**
     * Updates a specified attribute for some bike.
     * @param id = the id of the bike
     * @param attribute = the attribute that is changed
     * @param value = the new value of the attribute
     * @return String to see if your request passed
     */
    @PostMapping(path = "/update")
    @ResponseBody
    public String updateAttribute(@RequestParam int id, @RequestParam String attribute, @RequestParam String value) {
        if (bikeRepository.findById(id).isEmpty()) {
            return "Bike with ID: " + id + " does not exist!";
        }
        Bike bike = bikeRepository.findById(id).get();

        switch (attribute) {
            case "available":
                bike.setAvailable(Boolean.parseBoolean(value));
                break;
            case "location":
                int buildingid = Integer.parseInt(value);
                Optional<Building> optionalBuilding = buildingRepository.findById(buildingid);
                if (optionalBuilding.isEmpty()) {
                    return "Could not find building with id " + buildingid + "!";
                }
                Building building = optionalBuilding.get();
                bike.setLocation(building);
                break;
            default:
                return "No attribute with name " + attribute + " found!";
        }
        bikeRepository.save(bike);
        return "The attribute has been set!";
    }


    /**
     * Deletes a bike.
     * @param id = the id of the bike
     * @return String to see if your request passed
     */
    @DeleteMapping(path = "/delete/{bikeID}")
    @ResponseBody
    public String deleteBike(@PathVariable(value = "bikeID") int id) {
        if (!bikeRepository.existsById(id)) {
            return "Bike with ID: " + id + " does not exist!";
        }
        bikeRepository.deleteById(id);
        return "Deleted!";
    }

    /**
     * Lists all bikes.
     * @return all bikes
     */
    @GetMapping(path = "/all")
    @ResponseBody
    public Iterable<Bike> getAllBikes() {
        return bikeRepository.findAll();
    }

    /**
     * Finds a bike with the specified id.
     * @param bikeId = the bike id
     * @return a bike that matches the id
     */
    @GetMapping(path = "/find/{bikeId}")
    @ResponseBody
    public Bike findBike(@PathVariable (value = "bikeId") int bikeId) {
        return bikeRepository.findById(bikeId).orElse(null);
    }

}