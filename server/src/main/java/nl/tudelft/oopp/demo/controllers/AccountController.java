package nl.tudelft.oopp.demo.controllers;

import nl.tudelft.oopp.demo.entities.Account;
import nl.tudelft.oopp.demo.entities.BikeAdminAccount;
import nl.tudelft.oopp.demo.entities.BuildingAdminAccount;
import nl.tudelft.oopp.demo.entities.RestaurantAdminAccount;
import nl.tudelft.oopp.demo.entities.StaffAccount;
import nl.tudelft.oopp.demo.entities.UserAccount;
import nl.tudelft.oopp.demo.repositories.AccountRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

@Repository
@RestController // This means that this class is a Controller
@RequestMapping(path = "/account") // This means URL's start with /account (after Application path)
public class AccountController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private AccountRepository accountRepository;

    /**
     * Adds an account.
     * @param name = the name of the account
     * @return String to see if your request passed
     */
    @PostMapping(path = "/create") // Map ONLY POST Requests
    @ResponseBody
    public String addNewAccount(
            @RequestParam String email,
            @RequestParam String password,
            @RequestParam String name,
            @RequestParam String surname,
            @RequestParam String faculty,
            @RequestParam String type
    ) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request.
        if (accountRepository.existsById(email)) {
            return "The account with email " + email + " already exists!";
        }
        Account account;
        switch (type) {
            case "User":
                account = new UserAccount();
                break;
            case "Staff":
                account = new StaffAccount();
                break;
            case "BuildingAdmin":
                account = new BuildingAdminAccount();
                break;
            case "RestaurantAdmin":
                account = new RestaurantAdminAccount();
                break;
            case "BikeAdmin":
                account = new BikeAdminAccount();
                break;
            default:
                return "This user type is currently not supported!";
        }

        account.setEmail(email);
        account.setPassword(password);
        account.setName(name);
        account.setSurname(surname);
        account.setFaculty(faculty);
        accountRepository.save(account);
        return "Account created!";
    }

    /**
     * Deletes an account.
     * @param email = the email of the account
     * @return String to see if your request passed
     */
    @PostMapping(path = "/delete")
    @ResponseBody
    public String deleteAccount(@RequestParam String email) {
        if (!accountRepository.existsById(email)) {
            return "The account with email " + email + " does not exist!";
        }
        accountRepository.deleteById(email);
        return "The account with email " + email + " has been deleted!";
    }

    /**
     * Updates a database attribute "password".
     * @param email = the account email
     * @param password = The account password
     * @return message if it passes
     */
    @PostMapping(path = "/update_password")
    @ResponseBody
    public String updatePassword(@RequestParam String email, @RequestParam String password) {
        if (!accountRepository.existsById(email)) {
            return "The account with email " + email + " does not exist!";
        }
        Account account = accountRepository.getOne(email);
        String old = account.getPassword();
        account.setPassword(password);
        accountRepository.save(account);
        return "The previous password " + old + " has been changed to " + password + " for the account with email " + email + "!";
    }

    /**
     * Updates a database attribute "name".
     * @param email = the account email
     * @param name = The account name
     * @return message if it passes
     */
    @PostMapping(path = "/update_name")
    @ResponseBody
    public String updateName(@RequestParam String email, @RequestParam String name) {
        if (!accountRepository.existsById(email)) {
            return "The account with email " + email + " does not exist!";
        }
        Account account = accountRepository.getOne(email);
        String old = account.getName();
        account.setName(name);
        accountRepository.save(account);
        return "The previous name " + old + " has been changed to " + name + " for the account with email " + email + "!";
    }

    /**
     * Updates a database attribute "surname".
     * @param email = the account email
     * @param surname = The account surname
     * @return message if it passes
     */
    @PostMapping(path = "/update_surname")
    @ResponseBody
    public String updateSurname(@RequestParam String email, @RequestParam String surname) {
        if (!accountRepository.existsById(email)) {
            return "The account with email " + email + " does not exist!";
        }
        Account account = accountRepository.getOne(email);
        String old = account.getSurname();
        account.setSurname(surname);
        accountRepository.save(account);
        return "The previous surname " + old + " has been changed to " + surname + " for the account with email " + email + "!";
    }

    /**
     * Updates a database attribute "faculty".
     * @param email = the account email
     * @param faculty = The account surname
     * @return message if it passes
     */
    @PostMapping(path = "/update_faculty")
    @ResponseBody
    public String updateFaculty(@RequestParam String email, @RequestParam String faculty) {
        if (!accountRepository.existsById(email)) {
            return "The account with email " + email + " does not exist!";
        }
        Account account = accountRepository.getOne(email);
        String old = account.getFaculty();
        account.setFaculty(faculty);
        accountRepository.save(account);
        return "The previous faculty " + old + " has been changed to " + faculty + " for the account with email " + email + "!";
    }

    /**
     * Lists all accounts.
     * Should be removed for the finished version!
     * @return all accounts
     */
    @GetMapping(path = "/all")
    @ResponseBody
    public Iterable<Account> getAllUsers() {
        // This returns a JSON or XML with the users
        return accountRepository.findAll();
    }

    @GetMapping(path = "/find")
    @ResponseBody
    public Account getUser(@RequestParam String email) {
        if (!accountRepository.existsById(email)) {
            return null;
            //return "The account with email " + email + " does not exist!";
        }
        Account account = accountRepository.getOne(email);
        return account;
    }

}
