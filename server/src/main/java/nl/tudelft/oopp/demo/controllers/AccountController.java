package nl.tudelft.oopp.demo.controllers;

import nl.tudelft.oopp.demo.entities.*;
import nl.tudelft.oopp.demo.repositories.AccountRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

@Repository
@RestController // This means that this class is a Controller
@RequestMapping(path = "/account") // This means URL's start with /demo (after Application path)
public class AccountController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private AccountRepository accountRepository;

    /**
     * Adds an account.
     * @param name = the name of the account
     * @return String to see if your request passed
     */
    @PostMapping(path = "/create") // Map ONLY POST Requests
    @ResponseBody
    public String addNewAccount(
            @RequestParam String email,
            @RequestParam String name,
            @RequestParam String surname,
            @RequestParam String faculty,
            @RequestParam String type
    ) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request.
        Account account = null;
        if (type.equals("User")) {
            account = new UserAccount();
        } else if (type.equals("Staff")) {
            account = new StaffAccount();
        } else if (type.equals("BuildingAdmin")) {
            account = new BuildingAdminAccount();
        } else if (type.equals("RestaurantAdmin")) {
            account = new RestaurantAdminAccount();
        } else if (type.equals("BikeAdmin")) {
            account = new BikeAdminAccount();
        }

        assert account != null;

        account.setEmail(email);
        account.setName(name);
        account.setSurname(surname);
        account.setFaculty(faculty);
        accountRepository.save(account);
        return "Account created!";
    }

    /**
     * Deletes an account.
     * @param email = the email of the account
     * @return String to see if your request passed
     */
    @PostMapping(path = "/delete")
    @ResponseBody
    public String deleteAccount(@RequestParam String email) {
        if (!accountRepository.existsById(email)) {
            return "Account with email " + email + " Does not exist!";
        }
        accountRepository.deleteById(email);
        return "Deleted!";
    }

    /**
     * Updates a database attribute.
     * @param email = the account email
     * @param name = The account name
     * @return message if it passes
     */
    @PostMapping(path = "/updateName")
    @ResponseBody
    public String updateBuilding(@RequestParam String email, @RequestParam String name) {
        Account account = accountRepository.getOne(email);
        String old = account.getEmail();
        account.setName(name);
        accountRepository.save(account);
        return old + " changed to " + email + " for account with email " + email;
    }

    /**
     * Lists all accounts.
     * @return all accounts
     */
    @GetMapping(path = "/all")
    @ResponseBody
    public Iterable<Account> getAllUsers() {
        // This returns a JSON or XML with the users
        return accountRepository.findAll();
    }
}
